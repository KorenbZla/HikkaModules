# *      _                             __  __           _       _
# *     / \  _   _ _ __ ___  _ __ __ _|  \/  | ___   __| |_   _| | ___  ___ 
# *    / _ \| | | | '__/ _ \| '__/ _` | |\/| |/ _ \ / _` | | | | |/ _ \/ __|
# *   / ___ \ |_| | | | (_) | | | (_| | |  | | (_) | (_| | |_| | |  __/\__ \
# *  /_/   \_\__,_|_|  \___/|_|  \__,_|_|  |_|\___/ \__,_|\__,_|_|\___||___/
# *
# *                          ¬© Copyright 2024
# *
# *                      https://t.me/AuroraModules
# *
# * üîí Code is licensed under CC-BY-NC-ND 4.0 unless otherwise specified.
# * üåê https://creativecommons.org/licenses/by-nc-nd/4.0/
# * ‚õîÔ∏è You CANNOT edit this file without direct permission from the author.
# * ‚õîÔ∏è You can redistribute this file without any changes.
#meta developer: @AuroraModules

import asyncio
import logging
from .. import loader,utils

logging = logging.getLogger("AuroraFarm")

@loader.tds
class AuroraFarmMod(loader.Module):
    """–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à—É —Ä–∞–±–æ—Ç—É –≤ Aurora Kynimeister"""

    strings = {
        "name": "AuroraFarm",
        "loading": "<b><emoji document_id=5253952855185829086>‚öôÔ∏è</emoji> Loading..</b>",
        "group_id": "Group ID",
        "enable": "<b><emoji document_id=5226828654947874694>‚úÖ</emoji> Aurora Farm succefully started.</b>",
        "disable": "<b><emoji document_id=5404553572727660202>‚ùå</emoji> Aurora Farm succefully disabled.</b>"
    }

    strings_ru = {
        "loading": "<b><emoji document_id=5253952855185829086>‚öôÔ∏è</emoji> –ó–∞–≥—Ä—É–∑–∫–∞..</b>",
        "group_id": "–ê–π–¥–∏ –≥—Ä—É–ø–ø—ã",
        "enable": "<b><emoji document_id=5226828654947874694>‚úÖ</emoji> Aurora Farm —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω.</b>",
        "disable": "<b><emoji document_id=5404553572727660202>‚ùå</emoji> Aurora Farm —É—Å–ø–µ—à–Ω–æ –≤—ã–∫–ª—é—á–µ–Ω.</b>"
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "group_id",
                None,
                lambda: self.strings["group_id"]
            ),
        )
    async def client_ready(self, client, db):
        self.db = db
        self.client = client

    async def afarmcmd(self, message):
        """–í–∫–ª—é—á–∞–µ—Ç —Ñ–∞—Ä–º –≤ AuroraKynimeister"""
        try:
            status = self.db.get("farm_status", "status")
            msg = await utils.answer(message, self.strings["loading"])
            text = "–ö—É–Ω–∏"
            group_id = self.config.get("group_id", None)

            if group_id is None: 
                bot_dialog = await message.client.get_entity("@kynimeister_bot")
                async with message.client.conversation(bot_dialog) as conv:
                    while not status:  
                        self.db.set("farm_status", "status", True)
                        await utils.answer(message, self.strings["enable"])
                        while self.db.get("farm_status", "status"):
                            await conv.send_message(text)
                            await asyncio.sleep(14444)
                if status:
                    self.db.set("farm_status", "status", False)
                    await utils.answer(message, self.strings["disable"])                            
                return

            if status:
                self.db.set("farm_status", "status", False)
                await utils.answer(message, self.strings["disable"])
            else:
                self.db.set("farm_status", "status", True)
                await utils.answer(message, self.strings["enable"])
                while self.db.get("farm_status", "status"):
                    await message.client.send_message(int(group_id), text)
                    await asyncio.sleep(14444)

        except Exception as e:
            await utils.answer(
                message,
                f"Something went wrong..\nError: {e}\n\nIf the error persists,"
                " please write about the error to me in PM: https://t.me/KorenbZla"
            )
            logging.info("An error has occurred")


    async def chatidcmd(self, message):
        """–ö–æ–º–∞–Ω–¥–∞ .chatid –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç ID —á–∞—Ç–∞."""
        if message.is_private:
            return await message.edit("<b>–≠—Ç–æ –Ω–µ —á–∞—Ç!</b>")
        args = utils.get_args_raw(message)
        to_chat = None

        try:
            if args:
                to_chat = int(args) if args.isdigit() else args
            else:
                to_chat = message.chat_id

        except ValueError:
            to_chat = message.chat_id

        chat = await message.client.get_entity(to_chat)

        await message.edit(
            f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> <code>{chat.title}</code>\n"
            f"<b>ID</b>: <code>{chat.id}</code>"
        )
